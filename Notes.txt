Class Declaration:
@RestController: Annotation indicating that this class will handle HTTP requests
 and return the response as JSON or XML data.
public class PersonController: Declaration of the class named PersonController.
Constructor and Dependency Injection:
private final PersonService personService: Declaration of a final field of type
PersonService.
public PersonController(PersonService personService): Constructor for PersonController
 class, which injects an instance of PersonService into the controller.
HTTP Methods:
Create Person (POST):
@PostMapping("/people"): Annotation specifying that this method handles POST requests to /people.
public ResponseEntity<Person> createPerson(@RequestBody Person person): Method to create
a new person. It accepts a Person object in the request body.
return new ResponseEntity<>(personService.create(person), HttpStatus.OK): Calls the create
method of personService to create the person and returns a ResponseEntity with the created
person and HTTP status OK.
Find Person by ID (GET):
@GetMapping("/people/{id}"): Annotation specifying that this method handles GET requests to /people/{id}.
public ResponseEntity<Person> findPersonById(@PathVariable Long id): Method to find a person by their ID.
return new ResponseEntity<>(personService.findById(id), HttpStatus.OK): Calls the findById
method of personService to retrieve the person by ID and returns a ResponseEntity with the
found person and HTTP status OK.
Find All Persons (GET):
@GetMapping("/people"): Annotation specifying that this method handles GET requests to /people.
public ResponseEntity<Iterable<Person>> findAll(): Method to retrieve all persons.
return new ResponseEntity<>(personService.findAllPersons(), HttpStatus.OK): Calls the
findAllPersons method of personService to retrieve all persons and returns a ResponseEntity
with the list of persons and HTTP status OK.
Update Person (PUT):
@PutMapping("/people/{id}"): Annotation specifying that this method handles PUT requests to /people/{id}.
public ResponseEntity<Person> updatePerson(@RequestBody Person person, @PathVariable Long id):
Method to update a person by their ID. It accepts a Person object in the request body and the
person's ID as a path variable.
return new ResponseEntity<>(personService.updatePerson(id, person), HttpStatus.OK): Calls the
updatePerson method of personService to update the person and returns a ResponseEntity with the
updated person and HTTP status OK.
Delete Person (DELETE):
@DeleteMapping("/people/{id}"): Annotation specifying that this method handles DELETE requests to /people/{id}.
public ResponseEntity<Boolean> deletePerson(@PathVariable Long id): Method to delete a person by their ID.
return new ResponseEntity<>(personService.delete(id), HttpStatus.OK): Calls the delete method
of personService to delete the person and returns a ResponseEntity with a boolean indicating
success and HTTP status OK.
These methods define the RESTful endpoints for managing persons, delegating the actual operations
to corresponding methods in the PersonService class and returning appropriate responses to the client.

Class Declaration:
@Service: Annotation indicating that this class is a service component in Spring.
Constructor and Dependency Injection:
private final PersonRepository repo: Declaration of a final field named repo of type PersonRepository.
@Autowired public PersonService(PersonRepository repo): Constructor for the PersonService class,
which injects an instance of PersonRepository into the service.
CRUD Operations:
Find by ID:
public Person findById(long id): Method to find a person by their ID.
return repo.findById(id).orElseThrow(EntityNotFoundException::new): Calls the findById method
of the repository. If the person is not found, it throws an EntityNotFoundException.
Find All Persons:
public Iterable<Person> findAllPersons(): Method to retrieve all persons.
return repo.findAll(): Calls the findAll method of the repository to retrieve all persons.
Create:
public Person create(Person person): Method to create a new person.
return repo.save(person): Calls the save method of the repository to save the new person.
Update:
public Person updatePerson(Long id, Person person): Method to update an existing person.
Person personToUpdate = repo.findById(id).orElseThrow(EntityNotFoundException::new): Retrieves
 the existing person from the repository. If the person is not found, it throws an EntityNotFoundException.
Updates the attributes of the existing person with the attributes of the provided person object.
return repo.save(personToUpdate): Calls the save method of the repository to save the updated person.
Delete:
public boolean delete(Long id): Method to delete a person by their ID.
repo.deleteById(id): Calls the deleteById method of the repository to delete the person by ID.
return true: Returns true indicating successful deletion.
These methods encapsulate the logic for CRUD operations on persons, interacting with the
PersonRepository for data access. The service layer abstracts away the database interactions,
 providing a clean separation between data access and business logic.





